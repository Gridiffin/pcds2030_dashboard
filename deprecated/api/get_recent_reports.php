<?php

// BEGIN LOGGING CODE - FOR CLEANUP ANALYSIS - TEMPORARY
if (!function_exists('log_file_access')) {
    function log_file_access() {
        $logFile = dirname(__DIR__, 1) . '/file_access_log.txt';
        $timestamp = date('Y-m-d H:i:s');
        $file = str_replace('\\', '/', __FILE__);
        $file = str_replace($_SERVER['DOCUMENT_ROOT'], '', $file);
        $ip = $_SERVER['REMOTE_ADDR'] ?? 'unknown';
        $uri = $_SERVER['REQUEST_URI'] ?? 'unknown';
        $method = $_SERVER['REQUEST_METHOD'] ?? 'unknown';
        
        $logMessage = "$timestamp | $file | $ip | $method | $uri\n";
        file_put_contents($logFile, $logMessage, FILE_APPEND);
        return true;
    }
}
log_file_access();
// END LOGGING CODE

/**
 * Get Recent Reports API Endpoint
 *
 * Retrieves recent reports for a specific reporting period.
 * Ensures that output is always valid JSON.
 */

// Start output buffering to catch any stray output
ob_start();

// Include necessary files
require_once '../config/config.php';
require_once '../includes/db_connect.php'; // Must connect before session_start if session uses DB
require_once '../includes/session.php';
require_once '../includes/functions.php';

// Initialize response array
$response = [
    'success' => false,
    'reports' => [],
    'error' => ''
];

try {
    // Set header to return JSON as early as possible, but after potential errors from includes are caught or handled.
    // However, if an include has a fatal error, this might not be reached.
    // Best practice is to ensure includes don't output on error or to handle their errors gracefully.

    if (!is_logged_in()) {
        throw new Exception('User not logged in.');
    }

    // Get query parameters
    $period_id = isset($_GET['period_id']) ? intval($_GET['period_id']) : 0;
    $user_id = $_SESSION['user_id']; // Assuming user_id is stored in session

    // Build the query based on the user's role and parameters
    // Base query
    $query = "SELECT r.report_id, r.report_name, r.description, r.pptx_path, r.generated_at, r.is_public, 
                     rp.year, rp.quarter, u.username
              FROM reports r
              JOIN reporting_periods rp ON r.period_id = rp.period_id
              JOIN users u ON r.generated_by = u.user_id";

    $conditions = [];
    $params = [];
    $types = "";

    // Add period filter if provided
    if ($period_id > 0) {
        $conditions[] = "r.period_id = ?";
        $params[] = $period_id;
        $types .= "i";
    }

    // Add user role-based visibility restrictions
    $user_role = get_user_role(); // Ensure this function exists and returns the role

    if ($user_role === 'agency') { // Assuming 'agency' is a role identifier
        // Agency users see their reports or public reports.
        // This might need adjustment based on how reports are linked to agencies.
        // For example, if reports are linked via generated_by or a sector linked to the user.
        // Let's assume for now agency users see reports they generated or public ones.
        // Or reports linked to their agency's sector(s) if applicable.
        // This part is a placeholder and needs to match your actual logic for agency visibility.
        // $agency_sector_id = isset($_SESSION['sector_id']) ? $_SESSION['sector_id'] : 0;
        // $conditions[] = "(r.generated_by = ? OR r.is_public = 1 OR sec.sector_id = ?)";
        // $params[] = $user_id;
        // $params[] = $agency_sector_id;
        // $types .= "ii";
        // Simplified: show reports generated by user or public ones
         $conditions[] = "(r.generated_by = ? OR r.is_public = 1)";
         $params[] = $user_id;
         $types .= "i";

    } elseif ($user_role !== 'admin') { // Non-admin, non-agency users
        $conditions[] = "r.is_public = 1";
    }
    // Admins see all reports, so no additional conditions for them.

    if (!empty($conditions)) {
        $query .= " WHERE " . implode(" AND ", $conditions);
    }

    // Order by most recent first
    $query .= " ORDER BY r.generated_at DESC LIMIT 20";

    $stmt = $conn->prepare($query);
    if (!$stmt) {
        throw new Exception("Failed to prepare statement: " . $conn->error);
    }

    if (!empty($params)) {
        $stmt->bind_param($types, ...$params);
    }

    $stmt->execute();
    $result = $stmt->get_result();

    $reports_data = [];
    while ($row = $result->fetch_assoc()) {
        $reports_data[] = $row;
    }
    $stmt->close();

    $response['success'] = true;
    $response['reports'] = $reports_data;

} catch (Exception $e) {
    $response['success'] = false;
    $response['error'] = $e->getMessage();
    // Log the detailed error for server-side review
    error_log("Error in get_recent_reports.php: " . $e->getMessage() . "\nStack trace: " . $e->getTraceAsString());
}

// Clean the output buffer (catches any stray echoes or PHP errors if display_errors is on)
$stray_output = ob_get_clean();
if (!empty($stray_output) && $response['success']) {
    // If there was stray output but we thought we were successful,
    // it means the JSON might be corrupted. Mark as error.
    // This is a fallback; ideally, stray output shouldn't happen.
    if ($response['success']) { // only override if it was previously success
        error_log("Stray output detected in get_recent_reports.php: " . $stray_output);
        $response['success'] = false;
        $response['error'] = 'Server error: Unexpected output detected. JSON might be corrupted.';
        // $response['debug_stray_output'] = $stray_output; // Optionally send for debugging
    }
} elseif (!empty($stray_output) && !$response['success'] && empty($response['error'])) {
    // If it already failed and had no specific error, use the stray output as a clue.
    $response['error'] = 'Server error: Unexpected output detected. Details: ' . substr($stray_output, 0, 200);
    error_log("Stray output detected during error state in get_recent_reports.php: " . $stray_output);
}


// Always output JSON
header('Content-Type: application/json');
echo json_encode($response);
exit; // Ensure no further processing or output

?>