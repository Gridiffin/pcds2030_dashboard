**Project: Implement Client-Side PPTX Report Generation**

**Goal:** Allow administrators to generate a single-slide PowerPoint (PPTX) report summarizing key forestry data for a selected reporting period, mimicking the layout of the provided sample image. Generation will occur in the user's browser using the PptxGenJS library and a Master Slide for layout consistency.

**Database Context:**
* The database has a dedicated `reports` table (from `reports_table.sql`) with the following structure:
  * `report_id` - Auto-incremented primary key
  * `period_id` - Foreign key referencing `reporting_periods` table
  * `report_name` - Name of the report
  * `description` - Optional description of the report content
  * `pdf_path` - Path to the stored PDF file 
  * `pptx_path` - Path to the stored PPTX file
  * `generated_by` - Foreign key referencing `users` table (admin who generated the report)
  * `generated_at` - Timestamp of generation
  * `is_public` - Boolean flag (0/1) for report visibility to agencies

* Relevant supporting tables:
  * `reporting_periods` - Contains quarter/year information for each reporting period
  * `programs` - Programs associated with specific sectors
  * `program_submissions` - Status updates for programs in each reporting period
  * `sector_metrics_data` - Contains chart data needed for reports (including the timber export data)
  * `sectors` - Information about each sector (Forestry, Land, Environment, etc.)
  * `users` - Admin and agency user information

* The current database schema includes:
  * Statuses for program submissions use: 'target-achieved', 'on-track-yearly', 'severe-delay', 'not-started'
  * Only admin users can generate and export final reports (admin role in users table)
  * Agency users can only view reports (agency role in users table)

---

**PROGRESS UPDATE (May 6, 2025): Slide Layout Implementation**

We've successfully implemented the initial framework for generating PowerPoint presentations with the correct styling and layout based on the template. Here's what we've accomplished:

1. **Template Analysis**: Analyzed the provided template (`6 1 2025 Q5 - PCDS Dashboard-1.pptx`) to extract exact positioning of elements.

2. **Approach Selection**: Found that PptxGenJS doesn't support direct template loading, so we're recreating the template's layout programmatically.

3. **Coordinate Conversion**: Successfully implemented a system to convert PowerPoint measurements (in cm) to the inches format required by PptxGenJS.

4. **Initial Element Positioning**: Successfully implemented the first elements with exact positioning:
   - Sector box with border at [0.22", 0.08"] with dimensions 3.06" × 0.63"
   - Forest icon placement at [0.26", 0.13"] with dimensions 0.57" × 0.57"
   - Sector name text at [0.74", 0.20"] with dimensions 2.44" × 0.41"

5. **Default Structure**: Implemented a basic structure for the remaining slide elements (programs section, charts, KPIs, footer).

**Still Needed - Layout Information**:
To complete the slide layout to perfectly match the template, we need the exact positioning for the following elements:

1. **Quarter Information Section**:
   - Precise position and dimensions of the quarter box in the top-right corner
   - Font style and size of the quarter text

2. **Programs/Projects Section**:
   - Header box position and dimensions
   - Table structure measurements
   - Status indicator position relative to each row
   - Row height and padding measurements

3. **Charts Area**:
   - Specific positions and dimensions of chart containers
   - Chart title positioning
   - Legend positioning and style

4. **KPI Sections**:
   - Exact positions and dimensions of each KPI container
   - Spacing between KPI elements
   - Font sizes for KPI titles and values

5. **Footer Elements**:
   - Position of footer line
   - Draft date text position and style
   - Logo position and dimensions if applicable

Each measurement should be provided in centimeters from PowerPoint, which we'll convert to inches for the code.

---

**Phase 1: Backend Data Preparation (PHP)**

* **Task 1.1: Create API Endpoint** ✓
  * **Description:** Create a new PHP script (`api/report_data.php`) that will serve as the data source for the report. This script will receive parameters (like `reporting_period_id`) to filter the data.
  * **Context:** This endpoint separates data retrieval logic from the frontend presentation. It will be called via a `fetch` request from the JavaScript code.
  * **File:** `api/report_data.php`
  * **Requires:** Database connection (`config/config.php`), authentication checks (`includes/auth_check.php`).

* **Task 1.2: Implement Data Fetching Logic** ✓
  * **Description:** Within `api/report_data.php`, write PHP and SQL code to query the necessary database tables (`programs`, `metrics`, `sector_metrics_data`, `reporting_periods`, etc.) based on the input parameters.
  * **Context:** Gather all specific data points shown in the sample report image (titles, project details, ratings, statuses, chart data points, KPI values, dates).
  * **Requires:** Understanding of the database schema (`database/pcds2030_dashboard.sql`) and how data relates to the report elements.

* **Task 1.3: Format Data as JSON** ✓
  * **Description:** Structure the fetched data into a well-organized PHP associative array and then encode it as a JSON object using `json_encode()`. Set the `Content-Type` header to `application/json`.
  * **Context:** JSON is the standard format for transferring data between a web server and JavaScript running in a browser. The structure should be logical and easy for the JavaScript to parse (e.g., nested objects for charts, arrays for project lists).
  * **File:** `api/report_data.php`

---

**Phase 2: Frontend Implementation (HTML & JavaScript)**

* **Task 2.1: Integrate PptxGenJS Library** ✓
  * **Description:** Download the `pptxgen.bundle.js` file from the official PptxGenJS library source/releases. Place it in a suitable location within the project's assets.
  * **Context:** This library provides the core functionality for creating PPTX files in JavaScript.
  * **Location:** Suggest `assets/js/libs/pptxgen.bundle.js`

* **Task 2.2: Include JavaScript Files in View** ✓
  * **Description:** In the relevant view file where the report generation will be triggered (e.g., `views/admin/generate_reports.php` or similar), add `<script>` tags to include the PptxGenJS library and a new custom JavaScript file for the report generation logic.
  * **Context:** Makes the library and custom code available to the browser on the specific page.
  * **File:** e.g., `views/admin/generate_reports.php`

* **Task 2.3: Create Trigger Button** ✓
  * **Description:** Add an HTML button to the view file that the user will click to initiate the report generation. Give it a unique ID.
  * **Context:** Provides the user interface element to start the process.
  * **File:** e.g., `views/admin/generate_reports.php`

* **Task 2.4: Create Report Generator Script** ✓
  * **Description:** Create the new JavaScript file referenced in Task 2.2.
  * **Context:** This file will contain all the client-side logic for fetching data, defining the master slide, populating the slide, and triggering the download.
  * **File:** `assets/js/report-generator.js`

* **Task 2.5: Implement Button Event Listener & Data Fetching** ✓
  * **Description:** In `report-generator.js`, add an event listener to the button created in Task 2.3. When clicked, it should:
    1. Determine any necessary parameters (e.g., selected reporting period ID from the page).
    2. Use the `fetch` API to call the PHP endpoint created in Task 1.1, passing the parameters.
    3. Handle the JSON response, parsing the data.
    4. Call the presentation generation function (Task 2.7) with the fetched data.
    5. Include error handling for the fetch request.
  * **Context:** Connects the user action to the data retrieval and generation process.
  * **File:** `assets/js/report-generator.js`

* **Task 2.6: Define Master Slide Layout** ✓ (In progress - initial implementation completed, additional positioning needed)
  * **Description:** Within `report-generator.js`, create a function (e.g., `defineReportMaster`) that uses `pptx.defineSlideMaster()` to define the structure of the report slide. Define placeholders (`title`, `body`, `chart`, custom names) with their types, positions (`x`, `y`), and dimensions (`w`, `h`) based on the sample image layout.
  * **Context:** Creates a reusable template for the slide, making layout adjustments easier later. This avoids hardcoding positions for every single element directly when adding content.
  * **File:** `assets/js/report-generator.js`

* **Task 2.7: Implement Presentation Generation Function** ✓ (Basic implementation completed, needs refinement)
  * **Description:** Create the main function (e.g., `generatePresentation(data)`) in `report-generator.js` that:
    1. Initializes a new PptxGenJS presentation object (`let pptx = new PptxGenJS();`).
    2. Calls the function to define the master slide (Task 2.6).
    3. Adds a new slide using the defined master (`pptx.addSlide({ masterName: 'YOUR_MASTER_NAME' });`).
    4. Populates the slide with content from the fetched `data` object, using placeholders (`slide.addText(data.title, { placeholder: 'title' });`) where possible, or adding elements (text, shapes, charts, tables) with coordinates relative to the master slide layout for more complex sections (like the project list or specific KPI arrangements).
    5. Calls `pptx.writeFile()` to generate the PPTX file and trigger the browser download. Include error handling.
  * **Context:** This is the core logic that translates the JSON data into a PPTX slide using the PptxGenJS API and the defined master layout.
  * **File:** `assets/js/report-generator.js`

---

**Next Steps**:

1. **Continue Gathering Coordinates**: We need to gather precise coordinates for the remaining slide elements from the PowerPoint template.

2. **Styling Refinement**: Once all coordinates are implemented, we need to fine-tune fonts, colors, and other styling details to precisely match the template.

3. **Data Integration Testing**: Ensure that the data from the API is correctly displayed in the correct positions on the slide.

4. **Chart Implementation**: Add proper charts that match the style and format of those in the template.

5. **Complete End-to-End Testing**: Test the full workflow from selection to generation to storage.